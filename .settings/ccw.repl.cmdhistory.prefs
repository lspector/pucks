cmdhistory=["(run-pucks (agents) (settings))" "(user-proposals (active))" "(let [p (active)]\\n  (println \\"puck\:\\" p)\\n  (println \\"proposals\:\\" (user-proposals p)))" "(user)" "(relativize-position {\:position [700 400]} [100 400]})" "(relativize-position {\:position [700 400]} [100 400])" "(-v [700 400] [100 400])" "(-v [100 400] [700 400])" "(abs -2)" "(relativize-position {\:position [700 400]} [100 400])" "(range 100 701 200)" "(for [x (range 100 701 200)\\n          y (range 100 701 200)]\\n      (merge (beacon) {\:position [x y]\\n                       \:id [x y]}))" "(for [x (range 100 701 200)\\n          y (range 100 701 200)]\\n      {\:position [x y]\\n       \:id [x y]})" "(abs 1)" "(distance [100 400] [700 400])" "(relativize-position {\:position [100 100]} [0 0])" "(relativize-position {\:position [100 100]} [50 50])" "(relativize-position {\:position [100 100]} [25 25])" "(active)" "(+ 1 2)" "(type (filter even? (take 20 (range 50))))" "(type (apply list (filter even? (take 20 (range 50)))))" "(\:energy 1.2)" "(filter \:foo nil)" "(run-pucks (agents) (settings))" "(torpedo)" "(filter (fn [[k v]] (\=\= v true)) (torpedo))" "(filter (fn [[k v]] (\= v true)) (torpedo))" "(defn types [p]\\n  (map first (filter (fn [[k v]] (\= v true)) p)))" "(types (torpedo))" "(remove \:foo [\:bar \:foo \:baz \:foo])" "(defn remove-one\\n  \\"Returns sequence s without the first item for which predicate p is true.\\"\\n  [s p]\\n  (let [[without-item with-item] (split-with \#(not (p %)) s)]\\n    (concat without-item (rest with-item))))" "(defn remove-one\\n  \\"Returns sequence s without the first instance of item.\\"\\n  [s item]\\n  (let [[without-item with-item] (split-with \#(not (\= item %)) s)]\\n    (concat without-item (rest with-item))))" "(remove-one \:foo [\:bar \:foo \:baz \:foo \:bingo \:foo \:blah])" "(defn remove-one\\n  \\"Returns sequence s without the first instance of item.\\"\\n  [item s]\\n  (let [[without-item with-item] (split-with \#(not (\= item %)) s)]\\n    (concat without-item (rest with-item))))" "(remove-one \:foo [\:bar \:foo \:baz \:foo \:bingo \:foo \:blah])" "(remove-one \:fool [\:bar \:foo \:baz \:foo \:bingo \:foo \:blah])" "(avgv [0 0] [1 1])" "(use 'pucks.vec2D)" "(avgv [0 0] [1 1])" "(avgv [0 0])" "(count \#{})" "(count \#{1 2 3})" "(into \#{} [1 2 3])" "(direction->rotation nil)" "(use 'pucks.util)" "(direction->rotation nil)" "grid" "@grid" "grid-size" "(repeat grid-size (repeat grid-size []))" "(to-array-2d (repeat grid-size (repeat grid-size [])))" "(aset @grid 2 2 [1 2 3])" "(aget @grid 2 2)" "(quot 10 3)" "(int (/ 10 3))" "@pucks-settings" "grid-size" "(def foo (vec (repeat 4 (vec (repeat 4 [])))))" "foo" "(update-in foo [1 1] conj 5)" "(get-in foo [1 1])" "(get-in (update-in foo [1 1] conj 5) [1 1])" "(vent)" "(concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper)))" "(clojure.inspector/inspect (concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper))))" "(clojure.inspector/inspect-tree (concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper))))" "(clojure.inspector/inspect-tree (vec (concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper)))))" "(map \:position (vec (concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper)))))" "(map \:position (mapv (fn [p loc]\\n            (merge p {\:position loc}))\\n          (vec (concat (repeat 3 (nursery linear))\\n                       (repeat 3 (nursery swarmer))\\n                       (repeat 3 (nursery zigzag))\\n                       (repeat 8 (vent))\\n                       (repeat 8 (zapper))))\\n          (shuffle (for [x [100 300 500 700 900 1100 1300 1500]\\n                         y [100 300 500 700 900 1100 1300 1500]]\\n                     [x y]))))" "(count (mapv (fn [p loc]\\n                 (merge p {\:position loc}))\\n               (vec (concat (repeat 3 (nursery linear))\\n                            (repeat 3 (nursery swarmer))\\n                            (repeat 3 (nursery zigzag))\\n                            (repeat 8 (vent))\\n                            (repeat 8 (zapper))))\\n               (vec (shuffle (for [x [100 300 500 700 900 1100 1300 1500]\\n                                   y [100 300 500 700 900 1100 1300 1500]]\\n                               [x y])))))" "(map \:position (mapv (fn [p loc]\\n                 (merge p {\:position loc}))\\n               (vec (concat (repeat 3 (nursery linear))\\n                            (repeat 3 (nursery swarmer))\\n                            (repeat 3 (nursery zigzag))\\n                            (repeat 8 (vent))\\n                            (repeat 8 (zapper))))\\n               (vec (shuffle (for [x [100 300 500 700 900 1100 1300 1500]\\n                                   y [100 300 500 700 900 1100 1300 1500]]\\n                               [x y])))))" "@pucks-settings" "(mapv inc [])" "(if (mapv inc []) 1 0)" "(merge {\:foo 2} nil {\:bar 3})" "(mutate-urge 0.4)" "(if nil 1 2)" "(mutate-color [100 100 100])" "(hash {\:foo 2 \:bar 3})" "(run-pucks (agents) (settings))" "(def foo [{\:rotation 4.118058161261986, \:color [139 0 0], \:solid true, \:nursery true, \:steps 49, \:energy 1, \:radius 50, \:proposals {}, \:just-collided false, \:id puck-1078, \:position [700 700], \:mobile false, \:velocity [0 0]} {\:rotation -2.3451359272003174, \:color [128 255 0], \:solid true, \:steps 19, \:energy 0.8619999999999999, \:radius 20, \:proposals {\:acceleration 1, \:rotation -2.345136, \:transfer [{\:self puck-1082, \:other puck-1078, \:bid {}, \:ask \#<world16$agents$fn__1024$fn__1025$iter__1028__1032$fn__1033$fn__1034$fn__1035 pucks.worlds.dev.world16$agents$fn__1024$fn__1025$iter__1028__1032$fn__1033$fn__1034$fn__1035@308092db>}]}, \:just-collided false, \:active true, \:id puck-1082, \:core-color [0 255 0], \:position [652.2886938139176 736.3236466351844], \:eye-color [255 255 0], \:mobile true, \:velocity [-2.8596007328491666 2.7969060850676613]} {\:rotation 1.855639934539795, \:color [128 255 0], \:solid true, \:steps 39, \:energy 0.8019999999999998, \:radius 20, \:proposals {\:acceleration 1, \:rotation 1.8556399, \:transfer []}, \:just-collided false, \:active true, \:id puck-1080, \:core-color [0 255 0], \:position [5.384725944599863 753.7339998389651], \:eye-color [255 255 0], \:mobile true, \:velocity [3.838822449948592 1.124029447021157]} {\:vent true, \:rotation 0.623824165640358, \:color [255 255 255], \:solid true, \:steps 49, \:energy 1, \:radius 50, \:proposals {\:transfer []}, \:just-collided false, \:id puck-1075, \:position [700 500], \:mobile false, \:velocity [0 0]} {\:rotation 4.045812706401674, \:color [207 19 200], \:solid true, \:zapper true, \:steps 49, \:energy 1, \:radius 50, \:proposals {\:transfer []}, \:just-collided false, \:id puck-1076, \:position [100 500], \:mobile false, \:velocity [0 0]} {\:rotation 3.9483649032752286, \:color [139 0 0], \:solid true, \:nursery true, \:steps 49, \:energy 1, \:radius 50, \:proposals {}, \:just-collided false, \:id puck-1077, \:position [700 300], \:mobile false, \:velocity [0 0]}])" "(run-pucks (agents) (settings))" "(def myMap {\:a 7})" "(if (\:a myMap)\\n  1\\n  0)" "(if (\:n myMap)\\n  1\\n  0)" "(run-pucks (agents) (settings))" "(print-stack-trace)" "(run-pucks (agents) (settings))" "(.printStackTrace *e)"]
eclipse.preferences.version=1
