["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$get-literal-type","~$propeller.push.utils.helpers"],"~:excludes",["~#set",[]],"~:name","~$propeller.push.interpreter","~:imports",null,"~:requires",["^ ","~$push","~$propeller.push.core","^>","^>","~$state","~$propeller.push.state","^@","^@","~$io","~$propeller.push.instructions.input-output","^B","^B","^6","^6"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6"],"~:defs",["^ ","~$interpret-one-step",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jfong/projects/pucks/resources/public/js/development/propeller/push/interpreter.cljc","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",25,"~:arglists",["~#list",["~$quote",["^O",[["^?"]]]]],"~:doc","Takes a Push state and executes the next instruction on the exec stack."],"^9","~$propeller.push.interpreter/interpret-one-step","^I","resources/public/js/development/propeller/push/interpreter.cljc","^M",25,"~:method-params",["^O",[["^?"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"~:variadic?",false,"^J",7,"~:ret-tag",["^8",[null,"~$clj","~$any"]],"^L",7,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^?"]]]]],"^Q","Takes a Push state and executes the next instruction on the exec stack."],"~$interpret-program",["^ ","^G",null,"^H",["^ ","^I","/Users/jfong/projects/pucks/resources/public/js/development/propeller/push/interpreter.cljc","^J",39,"^K",7,"^L",39,"^M",24,"^N",["^O",["^P",["^O",[["~$program","~$start-state","~$step-limit"]]]]],"^Q","Runs the given problem starting with the stacks in start-state. If the\n  start-state includes the key :keep-history with a truthy value, then\n  the returned state will include the key :history with a value that is a\n  vector containing all states prior to the final state."],"^9","~$propeller.push.interpreter/interpret-program","^I","resources/public/js/development/propeller/push/interpreter.cljc","^M",24,"^S",["^O",[["^11","^12","^13"]]],"^T",null,"^U",["^O",[null,null]],"^K",1,"^V",false,"^J",39,"^W",["^8",["^X","^Y"]],"^L",39,"^Z",3,"^[",true,"^N",["^O",["^P",["^O",[["^11","^12","^13"]]]]],"^Q","Runs the given problem starting with the stacks in start-state. If the\n  start-state includes the key :keep-history with a truthy value, then\n  the returned state will include the key :history with a value that is a\n  vector containing all states prior to the final state."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:vector_integer","~:keep-history","~:else","~:exec","~:vector_float","~:history","~:generic-vector","~:vector_boolean","~:step","~:vector_string"]],"~:order",["^1<","^1?","^1@","^1=","^19","^1B","^1;","^1A","^1:","^1>"]],"^Q",null]